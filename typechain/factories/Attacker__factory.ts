/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Attacker, AttackerInterface } from "../Attacker";

const _abi = [
  {
    constant: false,
    inputs: [
      {
        name: "contractToAttack",
        type: "address",
      },
    ],
    name: "attack",
    outputs: [],
    payable: true,
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060bd8061001f6000396000f300608060405260043610603f576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff168063d018db3e146044575b600080fd5b6076600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506078565b005b8073ffffffffffffffffffffffffffffffffffffffff16ff00a165627a7a723058205e0b860d1022c21f38bc5d5dcc13def49d878751f904210a47cd9fdf99beeda30029";

export class Attacker__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Attacker> {
    return super.deploy(overrides || {}) as Promise<Attacker>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Attacker {
    return super.attach(address) as Attacker;
  }
  connect(signer: Signer): Attacker__factory {
    return super.connect(signer) as Attacker__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackerInterface {
    return new utils.Interface(_abi) as AttackerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Attacker {
    return new Contract(address, _abi, signerOrProvider) as Attacker;
  }
}
