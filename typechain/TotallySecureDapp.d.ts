/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TotallySecureDappInterface extends ethers.utils.Interface {
  functions: {
    "_posts(uint256)": FunctionFragment;
    "removePost(uint256)": FunctionFragment;
    "nPosts()": FunctionFragment;
    "_authors(uint256)": FunctionFragment;
    "_flagCaptured()": FunctionFragment;
    "addPost(string,string)": FunctionFragment;
    "_owner()": FunctionFragment;
    "_contractId()": FunctionFragment;
    "editPost(uint256,string,string)": FunctionFragment;
    "captureFlag()": FunctionFragment;
    "initialize(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_posts",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removePost",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "nPosts", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_authors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "_flagCaptured",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addPost",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_contractId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "editPost",
    values: [BigNumberish, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "captureFlag",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "initialize", values: [string]): string;

  decodeFunctionResult(functionFragment: "_posts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removePost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nPosts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_authors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_flagCaptured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addPost", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_contractId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "editPost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "captureFlag",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;

  events: {
    "PostPublished(address,uint256)": EventFragment;
    "PostEdited(address,uint256)": EventFragment;
    "PostRemoved(address,uint256)": EventFragment;
    "FlagCaptured(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "PostPublished"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostEdited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PostRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlagCaptured"): EventFragment;
}

export type PostPublishedEvent = TypedEvent<
  [string, BigNumber] & { author: string; index: BigNumber }
>;

export type PostEditedEvent = TypedEvent<
  [string, BigNumber] & { author: string; index: BigNumber }
>;

export type PostRemovedEvent = TypedEvent<
  [string, BigNumber] & { author: string; index: BigNumber }
>;

export type FlagCapturedEvent = TypedEvent<[string] & { capturer: string }>;

export class TotallySecureDapp extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TotallySecureDappInterface;

  functions: {
    _posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { title: string; content: string }>;

    removePost(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    nPosts(overrides?: CallOverrides): Promise<[BigNumber]>;

    _authors(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    _flagCaptured(overrides?: CallOverrides): Promise<[boolean]>;

    addPost(
      title: string,
      content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    _contractId(overrides?: CallOverrides): Promise<[string]>;

    editPost(
      index: BigNumberish,
      title: string,
      content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    captureFlag(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialize(
      contractId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _posts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { title: string; content: string }>;

  removePost(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  nPosts(overrides?: CallOverrides): Promise<BigNumber>;

  _authors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  _flagCaptured(overrides?: CallOverrides): Promise<boolean>;

  addPost(
    title: string,
    content: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _owner(overrides?: CallOverrides): Promise<string>;

  _contractId(overrides?: CallOverrides): Promise<string>;

  editPost(
    index: BigNumberish,
    title: string,
    content: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  captureFlag(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialize(
    contractId: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { title: string; content: string }>;

    removePost(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    nPosts(overrides?: CallOverrides): Promise<BigNumber>;

    _authors(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    _flagCaptured(overrides?: CallOverrides): Promise<boolean>;

    addPost(
      title: string,
      content: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _owner(overrides?: CallOverrides): Promise<string>;

    _contractId(overrides?: CallOverrides): Promise<string>;

    editPost(
      index: BigNumberish,
      title: string,
      content: string,
      overrides?: CallOverrides
    ): Promise<void>;

    captureFlag(overrides?: CallOverrides): Promise<void>;

    initialize(contractId: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "PostPublished(address,uint256)"(
      author?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { author: string; index: BigNumber }
    >;

    PostPublished(
      author?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { author: string; index: BigNumber }
    >;

    "PostEdited(address,uint256)"(
      author?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { author: string; index: BigNumber }
    >;

    PostEdited(
      author?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { author: string; index: BigNumber }
    >;

    "PostRemoved(address,uint256)"(
      author?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { author: string; index: BigNumber }
    >;

    PostRemoved(
      author?: string | null,
      index?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      { author: string; index: BigNumber }
    >;

    "FlagCaptured(address)"(
      capturer?: string | null
    ): TypedEventFilter<[string], { capturer: string }>;

    FlagCaptured(
      capturer?: string | null
    ): TypedEventFilter<[string], { capturer: string }>;
  };

  estimateGas: {
    _posts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    removePost(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    nPosts(overrides?: CallOverrides): Promise<BigNumber>;

    _authors(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    _flagCaptured(overrides?: CallOverrides): Promise<BigNumber>;

    addPost(
      title: string,
      content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    _contractId(overrides?: CallOverrides): Promise<BigNumber>;

    editPost(
      index: BigNumberish,
      title: string,
      content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    captureFlag(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialize(
      contractId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _posts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removePost(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    nPosts(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _authors(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _flagCaptured(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addPost(
      title: string,
      content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _contractId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    editPost(
      index: BigNumberish,
      title: string,
      content: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    captureFlag(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      contractId: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
